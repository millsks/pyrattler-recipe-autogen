name: CI

on:
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Needed for hatch-vcs

      - name: Set up Pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: v0.52.0
          cache: true

      - name: Install dependencies
        run: pixi install

      - name: Run tests with coverage
        run: pixi run test-cov

      - name: Upload coverage reports to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        uses: codecov/codecov-action@v5.4.3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage artifacts
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        uses: actions/upload-artifact@v4.6.2
        with:
          name: coverage-reports
          path: |
            coverage.xml
            coverage.json
            coverage.lcov
            htmlcov/

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: v0.52.0
          cache: true

      - name: Install dependencies
        run: pixi install

      - name: Run ruff linting
        run: pixi run lint

      - name: Run type checking
        run: pixi run typecheck

      - name: Check formatting
        run: |
          pixi run format
          git diff --exit-code || (echo "Code is not formatted. Run 'pixi run format' to fix." && exit 1)

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Needed for hatch-vcs

      - name: Set up Pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: v0.52.0
          cache: true

      - name: Install dependencies
        run: pixi install

      - name: Build package
        run: pixi run build

      - name: Check package integrity
        run: |
          pixi run twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: dist
          path: dist/

      - name: Test installation
        run: |
          python -m pip install dist/*.whl
          pyrattler-recipe-autogen --help

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: v0.52.0
          cache: true

      - name: Install dependencies
        run: pixi install

      - name: Run bandit security linter
        run: |
          pixi run bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
