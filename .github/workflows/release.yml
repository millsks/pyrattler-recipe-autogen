name: Release and Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Mark as pre-release"
        required: false
        type: boolean
        default: false
      publish_to_pypi:
        description: "Publish to PyPI"
        required: false
        type: boolean
        default: true
      publish_to_test_pypi:
        description: "Also publish to Test PyPI"
        required: false
        type: boolean
        default: false

jobs:
  release-and-publish:
    name: Release and Publish
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/pyrattler-recipe-autogen
    permissions:
      contents: write
      pull-requests: write
      id-token: write # For trusted publishing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PAT }}

      - name: Setup pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: v0.52.0

      - name: Validate version format
        run: |
          if ! echo "${{ inputs.version }}" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "❌ Invalid version format. Use semantic versioning (e.g., 1.0.0, 1.0.0-beta.1)"
            exit 1
          fi
          echo "✅ Version format is valid"

      - name: Check if version already exists
        run: |
          if git tag | grep -q "^v${{ inputs.version }}$"; then
            echo "❌ Version v${{ inputs.version }} already exists"
            exit 1
          fi
          echo "✅ Version is new"

      - name: Run quality checks
        run: |
          pixi run lint
          pixi run type-check
          pixi run security-check

      - name: Run tests with coverage
        run: pixi run test-cov

      - name: Build package
        run: pixi run build

      - name: Update CHANGELOG.md
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Create temporary file with new version entry
          cat << EOF > temp_changelog.md
          # Changelog

          ## [${{ inputs.version }}] - $(date +%Y-%m-%d)

          ### Added
          - Release version ${{ inputs.version }}

          EOF

          # Append existing content (skip the first "# Changelog" line if it exists)
          if grep -q "^# Changelog" CHANGELOG.md; then
            tail -n +2 CHANGELOG.md >> temp_changelog.md
          else
            cat CHANGELOG.md >> temp_changelog.md
          fi

          mv temp_changelog.md CHANGELOG.md

      - name: Commit and tag release
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "Release v${{ inputs.version }}"
          git tag -a "v${{ inputs.version }}" -m "Release v${{ inputs.version }}"
          git push origin main --tags

      - name: Generate release notes
        id: release_notes
        run: |
          NOTES="Release v${{ inputs.version }}\n\n          ## Changes in this release\n          \n          ### Package Information\n          - Version: ${{ inputs.version }}\n          - Build date: $(date)\n          - Commit: ${{ github.sha }}\n          \n          ### Quality Metrics\n          - All tests passed ✅\n          - Security checks passed ✅\n          - Type checking passed ✅\n          - Linting passed ✅\n          \n          ## Installation\n          \n          \`\`\`bash\n          pip install pyrattler-recipe-autogen==${{ inputs.version }}\n          \`\`\`\n          \n          ## Verification\n          \n          \`\`\`bash\n          python -c \"import pyrattler_recipe_autogen; print(pyrattler_recipe_autogen.__version__)\"\n          \`\`\`"

          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          files: dist/*
          token: ${{ secrets.GITHUB_TOKEN }}
