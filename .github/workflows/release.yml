name: Release and Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Mark as pre-release"
        required: false
        type: boolean
        default: false
      publish_to_pypi:
        description: "Publish to PyPI"
        required: false
        type: boolean
        default: true
      publish_to_test_pypi:
        description: "Also publish to Test PyPI"
        required: false
        type: boolean
        default: false
      force_recreate:
        description: "Remove existing tag/release if it exists before creating new one"
        required: false
        type: boolean
        default: false

jobs:
  release-and-publish:
    name: Release and Publish
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/pyrattler-recipe-autogen
    permissions:
      contents: write
      pull-requests: write
      id-token: write # For trusted publishing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PAT }}

      - name: Setup pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: v0.52.0

      - name: Validate version format
        run: |
          if ! echo "${{ inputs.version }}" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "‚ùå Invalid version format. Use semantic versioning (e.g., 1.0.0, 1.0.0-beta.1)"
            exit 1
          fi
          echo "‚úÖ Version format is valid"

      - name: Check if version already exists
        run: |
          if git tag | grep -q "^v${{ inputs.version }}$"; then
            if [ "${{ inputs.force_recreate }}" = "true" ]; then
              echo "‚ö†Ô∏è  Version v${{ inputs.version }} already exists but force_recreate is enabled"
              echo "Will remove existing tag and release..."
            else
              echo "‚ùå Version v${{ inputs.version }} already exists"
              echo "Use 'force_recreate' option to remove and recreate it"
              exit 1
            fi
          else
            echo "‚úÖ Version is new"
          fi

      - name: Remove existing tag and release (if force_recreate enabled)
        if: inputs.force_recreate == true
        env:
          GH_TOKEN: ${{ secrets.RELEASE_PAT }}
        run: |
          VERSION="v${{ inputs.version }}"

          # Check if tag exists
          if git tag | grep -q "^${VERSION}$"; then
            echo "üóëÔ∏è Removing existing tag: ${VERSION}"

            # Delete remote tag
            git push origin --delete "${VERSION}" || echo "Remote tag doesn't exist or already deleted"

            # Delete local tag
            git tag -d "${VERSION}" || echo "Local tag doesn't exist or already deleted"

            echo "‚úÖ Tag ${VERSION} removed"
          else
            echo "‚ÑπÔ∏è  Tag ${VERSION} doesn't exist, nothing to remove"
          fi

          # Check if GitHub release exists and delete it
          if gh release view "${VERSION}" >/dev/null 2>&1; then
            echo "üóëÔ∏è Removing existing GitHub release: ${VERSION}"
            gh release delete "${VERSION}" --yes
            echo "‚úÖ Release ${VERSION} removed"
          else
            echo "‚ÑπÔ∏è  Release ${VERSION} doesn't exist, nothing to remove"
          fi

      - name: Run quality checks
        run: |
          pixi run lint
          pixi run type-check
          pixi run security-check

      - name: Run tests with coverage
        run: pixi run test-cov

      - name: Build package
        run: pixi run build

      - name: Create temporary tag for changelog generation
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Create temporary tag for git-cliff to see
          git tag -a "v${{ inputs.version }}" -m "Release v${{ inputs.version }}"

      - name: Update CHANGELOG.md with git-cliff
        run: |
          # Generate changelog with the tag that now exists
          pixi run git-cliff --output CHANGELOG.md

          echo "‚úÖ Updated CHANGELOG.md with version v${{ inputs.version }}"

      - name: Commit changelog and recreate tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Remove the temporary tag
          git tag -d "v${{ inputs.version }}"
          # Add and commit the updated changelog
          git add CHANGELOG.md
          git commit -m "Release v${{ inputs.version }}"
          # Recreate the tag pointing to the commit with the changelog
          git tag -a "v${{ inputs.version }}" -m "Release v${{ inputs.version }}"
          git push origin main --tags

      - name: Generate release notes
        id: release_notes
        run: |
          cat << EOF >> $GITHUB_OUTPUT
          notes<<RELEASE_NOTES
          Release v${{ inputs.version }}

          ## Changes in this release

          ### Package Information
          - Version: ${{ inputs.version }}
          - Build date: $(date)
          - Commit: ${{ github.sha }}

          ### Quality Metrics
          - All tests passed ‚úÖ
          - Security checks passed ‚úÖ
          - Type checking passed ‚úÖ
          - Linting passed ‚úÖ

          ## Installation

          \`\`\`bash
          pip install pyrattler-recipe-autogen==${{ inputs.version }}
          \`\`\`

          ## Verification

          \`\`\`bash
          python -c "import pyrattler_recipe_autogen; print(pyrattler_recipe_autogen.__version__)"
          \`\`\`
          RELEASE_NOTES
          EOF

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          files: dist/*
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to Test PyPI
        if: inputs.publish_to_test_pypi == true
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          print-hash: true

      - name: Publish to PyPI
        if: inputs.publish_to_pypi == true
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          print-hash: true
